@using GridMvc.Html
@using ServiceAnt.DataAccess.Model
@using ServiceAnt.Web.Models
@model IEnumerable<FrequentlyUsedServiceVm>

@Html.Grid(Model).Columns(columns =>
{
   columns.Add().Encoded(false).Sanitized(false).RenderValueAs(col =>
      (col.Status == ServiceStatus.Stopped || col.Status == ServiceStatus.Paused
         ? Html.ActionLink("Start", "Start", new { id = col.Id }, new { @class = "btn btn-primary btn-xs" })
         : (col.Status == ServiceStatus.Running ? Html.ActionLink("Stop", "Stop", new { id = col.Id }, new { @class = "btn btn-primary btn-xs" }) : MvcHtmlString.Empty)).ToHtmlString());
   columns.Add(c => c.Id).Titled("Id");
   columns.Add(c => c.Alias).Titled("Twoja nazwa serwisu");
   columns.Add(c => c.MachineName).Titled("Nazwa hosta");
   columns.Add(c => c.DisplayName).Titled("Wyświetlana nazwa serwisu");
   columns.Add(c => c.Name).Titled("Nazwa serwisu");
   columns.Add(c => c.Status).Titled("Status").RenderValueAs(c => c.Status.GetDescription());
}).Sortable(true).WithPaging(10).SetRowCssClasses(SetColorPerStatus).Selectable(false)

@functions {
   private string SetColorPerStatus(FrequentlyUsedServiceVm frequentlyUsedServiceVm)
   {
      switch (frequentlyUsedServiceVm.Status)
      {
         case ServiceStatus.Running:
            return "success";
         case ServiceStatus.Stopped:
            return "danger";
         case ServiceStatus.ContinuePending:
            return "warning";
         case ServiceStatus.PausePending:
            return "warning";
         case ServiceStatus.StartPending:
            return "warning";
         case ServiceStatus.StopPending:
            return "warning";
         default:
            return string.Empty;
      }
   }
}